; SMT-LIBv2 description generated by Yosys 0.48+47 (git sha1 cbb95cb51, clang++ 18.1.8 -fPIC -O3)
; yosys-smt2-module demo1
(declare-sort |demo1_s| 0)
(declare-fun |demo1_is| (|demo1_s|) Bool)
; yosys-smt2-anyinit demo1#0 1 demo1.v:9.1-9.38
; yosys-smt2-witness {"offset": 0, "path": ["\\reset_"], "smtname": 0, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |demo1#0| (|demo1_s|) (_ BitVec 1)) ; \reset_
; yosys-smt2-register reset_ 1
; yosys-smt2-wire reset_ 1
(define-fun |demo1_n reset_| ((state |demo1_s|)) Bool (= ((_ extract 0 0) (|demo1#0| state)) #b1))
; yosys-smt2-wire reset 1
(define-fun |demo1_n reset| ((state |demo1_s|)) Bool false)
; yosys-smt2-anyinit demo1#1 2 demo1.v:12.1-21.4
; yosys-smt2-witness {"offset": 0, "path": ["\\cntr"], "smtname": 1, "smtoffset": 0, "type": "init", "width": 2}
(declare-fun |demo1#1| (|demo1_s|) (_ BitVec 2)) ; \cntr
; yosys-smt2-register cntr 2
; yosys-smt2-wire cntr 2
(define-fun |demo1_n cntr| ((state |demo1_s|)) (_ BitVec 2) (|demo1#1| state))
(declare-fun |demo1#2| (|demo1_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-clock clk posedge
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "posedge", "width": 1}
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |demo1_n clk| ((state |demo1_s|)) Bool (|demo1#2| state))
(define-fun |demo1#3| ((state |demo1_s|)) (_ BitVec 1) (bvnot (ite (|demo1#2| state) #b1 #b0))) ; $auto$rtlil.cc:2739:Not$28
; yosys-smt2-assume 0 $auto$formalff.cc:758:execute$29
(define-fun |demo1_u 0| ((state |demo1_s|)) Bool (or (= ((_ extract 0 0) (|demo1#3| state)) #b1) (not true))) ; $auto$formalff.cc:758:execute$29
(define-fun |demo1#4| ((state |demo1_s|)) Bool (|demo1_is| state)) ; $initstate$1_wire
(define-fun |demo1#5| ((state |demo1_s|)) Bool (not (or  (= ((_ extract 0 0) (|demo1#0| state)) #b1) false))) ; $logic_not$demo1.v:23$7_Y
(define-fun |demo1#6| ((state |demo1_s|)) Bool (or  (|demo1#4| state) false  (|demo1#5| state) false)) ; $logic_or$demo1.v:23$8_Y
(define-fun |demo1#7| ((state |demo1_s|)) Bool (distinct (|demo1#1| state) #b11)) ; $ne$demo1.v:23$9_Y
(define-fun |demo1#8| ((state |demo1_s|)) Bool (or  (|demo1#6| state) false  (|demo1#7| state) false)) ; $logic_or$demo1.v:23$10_Y
; yosys-smt2-assert 0 _witness_.check_assert_demo1_v_21_6 demo1.v:21.4-23.52
(define-fun |demo1_a 0| ((state |demo1_s|)) Bool (or (|demo1#8| state) (not true))) ; _witness_.check_assert_demo1_v_21_6
(define-fun |demo1#9| ((state |demo1_s|)) (_ BitVec 2) (bvadd (|demo1#1| state) #b01)) ; $add$demo1.v:16$5_Y
(define-fun |demo1#10| ((state |demo1_s|)) Bool (= (|demo1#1| state) #b10)) ; $eq$demo1.v:13$4_Y
(define-fun |demo1#11| ((state |demo1_s|)) (_ BitVec 2) (ite (|demo1#10| state) #b00 (|demo1#9| state))) ; $procmux$13_Y
(define-fun |demo1#12| ((state |demo1_s|)) (_ BitVec 2) (ite (= ((_ extract 0 0) (|demo1#0| state)) #b1) #b00 (|demo1#11| state))) ; $0\cntr[1:0]
(define-fun |demo1_a| ((state |demo1_s|)) Bool 
  (|demo1_a 0| state)
)
(define-fun |demo1_u| ((state |demo1_s|)) Bool 
  (|demo1_u 0| state)
)
(define-fun |demo1_i| ((state |demo1_s|)) Bool true)
(define-fun |demo1_h| ((state |demo1_s|)) Bool true)
(define-fun |demo1_t| ((state |demo1_s|) (next_state |demo1_s|)) Bool (and
  (= (|demo1#12| state) (|demo1#1| next_state)) ; $procdff$17 \cntr
  (= #b1 (|demo1#0| next_state)) ; $procdff$18 \reset_
)) ; end of module demo1
; yosys-smt2-topmod demo1
; end of yosys output
